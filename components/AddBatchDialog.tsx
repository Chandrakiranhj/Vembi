'use client';

import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { toast } from 'sonner';
import { Component } from "@/lib/hooks/useComponents"; // Use the shared Component type
import { Spinner } from "@/components/ui/spinner"; // Import spinner for loading states

// Vendor interface
interface Vendor {
  id: string;
  name: string;
}

interface AddBatchDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onBatchAdded: () => void; // Callback after successful add
  components: Component[]; // List of components to select from
}

interface BatchFormData {
  componentId: string;
  initialQuantity: number | string; // Use string initially for input control
  vendorId: string;
  dateReceived?: string; // Use string for date input
  notes: string;
}

const AddBatchDialog: React.FC<AddBatchDialogProps> = ({ 
  isOpen, 
  onClose, 
  onBatchAdded, 
  components 
}) => {
  const [formData, setFormData] = useState<Partial<BatchFormData>>({
    notes: '', 
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [vendors, setVendors] = useState<Vendor[]>([]);
  const [isLoadingVendors, setIsLoadingVendors] = useState(false);

  // Fetch vendors when dialog opens
  useEffect(() => {
    if (isOpen) {
      fetchVendors();
      setFormData({ notes: '' }); // Reset form fields
      setErrors({});
    }
  }, [isOpen]);

  // Fetch vendors from API
  const fetchVendors = async () => {
    setIsLoadingVendors(true);
    try {
      const response = await fetch('/api/vendors');
      if (!response.ok) {
        throw new Error('Failed to fetch vendors');
      }
      const data = await response.json();
      setVendors(data.vendors || []);
    } catch (error) {
      console.error('Error fetching vendors:', error);
      toast.error('Failed to load vendors');
      setVendors([]);
    } finally {
      setIsLoadingVendors(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? (value === '' ? '' : parseFloat(value)) : value
    }));
    // Clear error for the field being changed
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleComponentChange = (value: string) => {
    setFormData(prev => ({ ...prev, componentId: value }));
    if (errors.componentId) {
      setErrors(prev => ({ ...prev, componentId: '' }));
    }
  };

  const handleVendorChange = (value: string) => {
    setFormData(prev => ({ ...prev, vendorId: value }));
    if (errors.vendorId) {
      setErrors(prev => ({ ...prev, vendorId: '' }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    if (!formData.componentId) newErrors.componentId = 'Component is required.';
    if (!formData.initialQuantity || Number(formData.initialQuantity) <= 0) newErrors.initialQuantity = 'Initial quantity must be a positive number.';
    if (!formData.vendorId) newErrors.vendorId = 'Vendor is required.';
    
    // Optional validations
    if (formData.dateReceived && isNaN(Date.parse(formData.dateReceived))) newErrors.dateReceived = 'Invalid received date.';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    try {
      const payload = {
        ...formData,
        initialQuantity: Number(formData.initialQuantity),
        // Batch number will be auto-generated by the API
      };

      const response = await fetch('/api/batches', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to add batch');
      }

      toast.success('Stock batch added successfully!');
      onBatchAdded(); // Call the success callback (closes dialog, refetches list)
      
    } catch (error) { 
      console.error('Failed to add batch:', error);
      toast.error('Failed to add batch', {
        description: error instanceof Error ? error.message : 'An unknown error occurred.',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Add New Stock Batch</DialogTitle>
          <DialogDescription>
            Enter the details for the received stock batch.
          </DialogDescription>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="grid gap-4 py-4">
          {/* Component Selection */}
          <div className="space-y-2">
            <label htmlFor="componentId" className="block text-sm font-medium text-gray-700">
              Component <span className="text-red-500">*</span>
            </label>
            <Select 
              value={formData.componentId || ''}
              onValueChange={handleComponentChange}
              disabled={isSubmitting}
            >
              <SelectTrigger id="componentId" className="w-full">
                <SelectValue placeholder="Select component..." />
              </SelectTrigger>
              <SelectContent>
                {components.map(comp => (
                  <SelectItem key={comp.id} value={comp.id}>
                    {comp.name} ({comp.sku})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.componentId && <p className="mt-1 text-sm text-red-600">{errors.componentId}</p>}
          </div>

          {/* Initial Quantity */}
          <div className="space-y-2">
            <label htmlFor="initialQuantity" className="block text-sm font-medium text-gray-700">
              Quantity Received <span className="text-red-500">*</span>
            </label>
            <Input
              id="initialQuantity"
              name="initialQuantity"
              type="number"
              min="1"
              step="1"
              value={formData.initialQuantity || ''}
              onChange={handleChange}
              placeholder="e.g., 100"
              disabled={isSubmitting}
              className="w-full"
            />
            {errors.initialQuantity && <p className="mt-1 text-sm text-red-600">{errors.initialQuantity}</p>}
          </div>

          {/* Vendor */}
          <div className="space-y-2">
            <label htmlFor="vendorId" className="block text-sm font-medium text-gray-700">
              Vendor <span className="text-red-500">*</span>
            </label>
            {isLoadingVendors ? (
              <div className="flex items-center justify-center p-3 bg-gray-50 rounded-md">
                <Spinner size="sm" />
                <span className="ml-2 text-sm">Loading vendors...</span>
              </div>
            ) : (
              <>
                <Select 
                  value={formData.vendorId || ''}
                  onValueChange={handleVendorChange}
                  disabled={isSubmitting || vendors.length === 0}
                >
                  <SelectTrigger id="vendorId" className="w-full">
                    <SelectValue placeholder="Select vendor..." />
                  </SelectTrigger>
                  <SelectContent>
                    {vendors.map(vendor => (
                      <SelectItem key={vendor.id} value={vendor.id}>
                        {vendor.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {vendors.length === 0 && !isLoadingVendors && (
                  <p className="mt-1 text-sm text-amber-600">No vendors available. Please add vendors first.</p>
                )}
              </>
            )}
            {errors.vendorId && <p className="mt-1 text-sm text-red-600">{errors.vendorId}</p>}
          </div>

          {/* Date Received */}
          <div className="space-y-2">
            <label htmlFor="dateReceived" className="block text-sm font-medium text-gray-700">
              Date Received
            </label>
            <Input
              id="dateReceived"
              name="dateReceived"
              type="date"
              value={formData.dateReceived || ''}
              onChange={handleChange}
              disabled={isSubmitting}
              className="w-full"
            />
            {errors.dateReceived && <p className="mt-1 text-sm text-red-600">{errors.dateReceived}</p>}
          </div>

          {/* Notes */}
          <div className="space-y-2">
            <label htmlFor="notes" className="block text-sm font-medium text-gray-700">
              Notes
            </label>
            <Textarea
              id="notes"
              name="notes"
              value={formData.notes || ''}
              onChange={handleChange}
              placeholder="Optional notes about this batch..."
              disabled={isSubmitting}
              className="w-full h-20"
            />
          </div>

          <DialogFooter className="mt-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={onClose}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button 
              type="submit" 
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Spinner size="sm" className="mr-2" />
                  Adding...
                </>
              ) : 'Add Batch'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default AddBatchDialog; 